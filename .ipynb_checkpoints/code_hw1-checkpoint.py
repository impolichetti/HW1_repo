{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "97569876-6126-467b-8ae4-4f656f1e6784",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: mapclassify in c:\\users\\bella\\anaconda3\\lib\\site-packages (2.8.1)\n",
      "Requirement already satisfied: networkx>=2.7 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from mapclassify) (3.3)\n",
      "Requirement already satisfied: numpy>=1.23 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from mapclassify) (1.26.4)\n",
      "Requirement already satisfied: pandas!=1.5.0,>=1.4 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from mapclassify) (2.2.2)\n",
      "Requirement already satisfied: scikit-learn>=1.0 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from mapclassify) (1.5.1)\n",
      "Requirement already satisfied: scipy>=1.8 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from mapclassify) (1.13.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from pandas!=1.5.0,>=1.4->mapclassify) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from pandas!=1.5.0,>=1.4->mapclassify) (2024.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from pandas!=1.5.0,>=1.4->mapclassify) (2023.3)\n",
      "Requirement already satisfied: joblib>=1.2.0 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from scikit-learn>=1.0->mapclassify) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from scikit-learn>=1.0->mapclassify) (3.5.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\bella\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas!=1.5.0,>=1.4->mapclassify) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install --upgrade mapclassify"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4887dcf3-57fb-4155-b787-45b837392ae0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mapclassify\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "import requests\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "afd908af-bcc9-44be-a2c9-26a612a1320c",
   "metadata": {},
   "outputs": [],
   "source": [
    "link=\"https://github.com/DACSS-CSSmeths/Spatial-Exploring/raw/refs/heads/main/maps/countriesCIA.gpkg\"\n",
    "countriesCIA=gpd.read_file(link, layer='cia')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "792345ef-573c-47d3-81c4-fa6b5404bd0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>name</th>\n",
       "      <th>region</th>\n",
       "      <th>obesityAdults_rate</th>\n",
       "      <th>TobaccoUse_perc</th>\n",
       "      <th>Alcohol_LitersPerCap</th>\n",
       "      <th>tobacco_code</th>\n",
       "      <th>tobacco_levels</th>\n",
       "      <th>tobacco_custom</th>\n",
       "      <th>alcohol_code</th>\n",
       "      <th>alcohol_levels</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>5.5</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.01</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((61.27656 35.60725, 61.29638 35...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>Africa</td>\n",
       "      <td>27.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0.59</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((-5.15213 30.18047, -5.13917 30...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Azerbaijan</td>\n",
       "      <td>Azerbaijan</td>\n",
       "      <td>Middle East</td>\n",
       "      <td>19.9</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.38</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((46.54037 38.87559, 46.49554 38...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>Albania</td>\n",
       "      <td>Europe</td>\n",
       "      <td>21.7</td>\n",
       "      <td>22.4</td>\n",
       "      <td>4.40</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>MULTIPOLYGON (((20.79192 40.43154, 20.78722 40...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Armenia</td>\n",
       "      <td>Armenia</td>\n",
       "      <td>Middle East</td>\n",
       "      <td>20.2</td>\n",
       "      <td>25.5</td>\n",
       "      <td>3.77</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>1</td>\n",
       "      <td>2.low</td>\n",
       "      <td>MULTIPOLYGON (((46.54037 38.87559, 46.51639 38...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       COUNTRY         name       region  obesityAdults_rate  TobaccoUse_perc  \\\n",
       "0  Afghanistan  Afghanistan   South Asia                 5.5             23.3   \n",
       "1      Algeria      Algeria       Africa                27.4             21.0   \n",
       "2   Azerbaijan   Azerbaijan  Middle East                19.9             24.0   \n",
       "3      Albania      Albania       Europe                21.7             22.4   \n",
       "4      Armenia      Armenia  Middle East                20.2             25.5   \n",
       "\n",
       "   Alcohol_LitersPerCap  tobacco_code tobacco_levels tobacco_custom  \\\n",
       "0                  0.01             2      3.average      3.(15-30]   \n",
       "1                  0.59             2      3.average      3.(15-30]   \n",
       "2                  1.38             2      3.average      3.(15-30]   \n",
       "3                  4.40             2      3.average      3.(15-30]   \n",
       "4                  3.77             2      3.average      3.(15-30]   \n",
       "\n",
       "   alcohol_code alcohol_levels  \\\n",
       "0             0     1.very low   \n",
       "1             0     1.very low   \n",
       "2             0     1.very low   \n",
       "3             2      3.average   \n",
       "4             1          2.low   \n",
       "\n",
       "                                            geometry  \n",
       "0  MULTIPOLYGON (((61.27656 35.60725, 61.29638 35...  \n",
       "1  MULTIPOLYGON (((-5.15213 30.18047, -5.13917 30...  \n",
       "2  MULTIPOLYGON (((46.54037 38.87559, 46.49554 38...  \n",
       "3  MULTIPOLYGON (((20.79192 40.43154, 20.78722 40...  \n",
       "4  MULTIPOLYGON (((46.54037 38.87559, 46.51639 38...  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countriesCIA.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1d8da420-f089-445b-af6b-f84b56f58981",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    147.000000\n",
       "mean      19.506122\n",
       "std       10.253340\n",
       "min        2.100000\n",
       "25%        9.750000\n",
       "50%       20.800000\n",
       "75%       25.100000\n",
       "max       61.000000\n",
       "Name: obesityAdults_rate, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countriesCIA.obesityAdults_rate.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4f0661eb-5a3d-4441-9b2c-93dc0c66a8f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# variable we use: obesityAdults_rate\n",
    "#Finding the best scheme to get 5 bins of the variable obesity.\n",
    "#Remember the best is the one with the lowest ADCM. (In my tutorial pay attention to codes 29, 30 and 31\n",
    "np.random.seed(12345)\n",
    "\n",
    "K=5\n",
    "\n",
    "theVar=countriesCIA.obesityAdults_rate\n",
    "\n",
    "\n",
    "ei5 = mapclassify.EqualInterval(theVar, k=K)\n",
    "msd = mapclassify.StdMean(theVar)\n",
    "q5 = mapclassify.Quantiles(theVar, k=K)\n",
    "mb5 = mapclassify.MaximumBreaks(theVar, k=K)\n",
    "fj5 = mapclassify.FisherJenks(theVar, k=K)\n",
    "jc5 = mapclassify.JenksCaspall(theVar, k=K)\n",
    "mp5 = mapclassify.MaxP(theVar, k=K)\n",
    "ht = mapclassify.HeadTailBreaks(theVar)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "d7793ec9-e0a8-4642-8f53-fd38ddb87c3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class5 = ei5,msd, q5,mb5,  ht, fj5, jc5, mp5\n",
    "fits = np.array([ c.adcm for c in class5]) \n",
    "adcms = pd.DataFrame(fits)\n",
    "adcms['classifier'] = [c.name for c in class5]\n",
    "adcms.columns = ['ADCM', 'Classifier']\n",
    "adcms.sort_values('ADCM').plot.barh(x='Classifier')\n",
    "plt.show();\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "8333cc9b-c4bd-4059-af9a-efae68e9e546",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "8192a95c-a2a2-4389-9b30-61cd8b46e70b",
   "metadata": {},
   "outputs": [],
   "source": [
    "newLevels = {0: '1.very low', 1: '2.low', 2: '3.average', 3: '4.high', 4: '5.very high'}\n",
    "\n",
    "best_scheme = fj5  \n",
    "\n",
    "countriesCIA['obesity_levels'] = best_scheme.yb  \n",
    "\n",
    "countriesCIA.replace({'obesity_levels': newLevels}, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "9c71b29f-4df2-4fea-bc66-6b97bad37ae6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>name</th>\n",
       "      <th>region</th>\n",
       "      <th>obesityAdults_rate</th>\n",
       "      <th>TobaccoUse_perc</th>\n",
       "      <th>Alcohol_LitersPerCap</th>\n",
       "      <th>tobacco_code</th>\n",
       "      <th>tobacco_levels</th>\n",
       "      <th>tobacco_custom</th>\n",
       "      <th>alcohol_code</th>\n",
       "      <th>alcohol_levels</th>\n",
       "      <th>geometry</th>\n",
       "      <th>obesity_levels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.01</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((61.27656 35.60725, 61.29638 35...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Algeria</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>Africa</td>\n",
       "      <td>2</td>\n",
       "      <td>21.0</td>\n",
       "      <td>0.59</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((-5.15213 30.18047, -5.13917 30...</td>\n",
       "      <td>3.average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Azerbaijan</td>\n",
       "      <td>Azerbaijan</td>\n",
       "      <td>Middle East</td>\n",
       "      <td>1</td>\n",
       "      <td>24.0</td>\n",
       "      <td>1.38</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((46.54037 38.87559, 46.49554 38...</td>\n",
       "      <td>2.low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>Albania</td>\n",
       "      <td>Europe</td>\n",
       "      <td>1</td>\n",
       "      <td>22.4</td>\n",
       "      <td>4.40</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>MULTIPOLYGON (((20.79192 40.43154, 20.78722 40...</td>\n",
       "      <td>2.low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Armenia</td>\n",
       "      <td>Armenia</td>\n",
       "      <td>Middle East</td>\n",
       "      <td>1</td>\n",
       "      <td>25.5</td>\n",
       "      <td>3.77</td>\n",
       "      <td>2</td>\n",
       "      <td>3.average</td>\n",
       "      <td>3.(15-30]</td>\n",
       "      <td>1</td>\n",
       "      <td>2.low</td>\n",
       "      <td>MULTIPOLYGON (((46.54037 38.87559, 46.51639 38...</td>\n",
       "      <td>2.low</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       COUNTRY         name       region  obesityAdults_rate  TobaccoUse_perc  \\\n",
       "0  Afghanistan  Afghanistan   South Asia                   0             23.3   \n",
       "1      Algeria      Algeria       Africa                   2             21.0   \n",
       "2   Azerbaijan   Azerbaijan  Middle East                   1             24.0   \n",
       "3      Albania      Albania       Europe                   1             22.4   \n",
       "4      Armenia      Armenia  Middle East                   1             25.5   \n",
       "\n",
       "   Alcohol_LitersPerCap  tobacco_code tobacco_levels tobacco_custom  \\\n",
       "0                  0.01             2      3.average      3.(15-30]   \n",
       "1                  0.59             2      3.average      3.(15-30]   \n",
       "2                  1.38             2      3.average      3.(15-30]   \n",
       "3                  4.40             2      3.average      3.(15-30]   \n",
       "4                  3.77             2      3.average      3.(15-30]   \n",
       "\n",
       "   alcohol_code alcohol_levels  \\\n",
       "0             0     1.very low   \n",
       "1             0     1.very low   \n",
       "2             0     1.very low   \n",
       "3             2      3.average   \n",
       "4             1          2.low   \n",
       "\n",
       "                                            geometry obesity_levels  \n",
       "0  MULTIPOLYGON (((61.27656 35.60725, 61.29638 35...     1.very low  \n",
       "1  MULTIPOLYGON (((-5.15213 30.18047, -5.13917 30...      3.average  \n",
       "2  MULTIPOLYGON (((46.54037 38.87559, 46.49554 38...          2.low  \n",
       "3  MULTIPOLYGON (((20.79192 40.43154, 20.78722 40...          2.low  \n",
       "4  MULTIPOLYGON (((46.54037 38.87559, 46.51639 38...          2.low  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "countriesCIA.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "691c8e34-7237-4126-bb30-46e9ae4e38dd",
   "metadata": {},
   "source": [
    "FisherJenks (fj5) has the lowest ADCM, which means it is the best scheme to get 5 bins of our obesity variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a2a3e5-287f-4be4-a959-4ff2a80e18b2",
   "metadata": {},
   "source": [
    "2. Use the scheme you found in the previous step to bin the  columns on alcohol and tobacco. You already have those variables binned using FisherJenks, if the previous step recommends this same scheme, you do not need to redo the code for these variables, just use them. But if the previous step recommends a different one, you need to create new variables (lines 36 and 46 are useful for that)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "4af38ae5-fa90-44a4-b2ed-4118a90bc848",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['COUNTRY', 'name', 'region', 'obesityAdults_rate', 'TobaccoUse_perc',\n",
      "       'Alcohol_LitersPerCap', 'tobacco_code', 'tobacco_levels',\n",
      "       'tobacco_custom', 'alcohol_code', 'alcohol_levels', 'geometry',\n",
      "       'obesity_levels'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(countriesCIA.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d50af24a-fb68-4c6c-aba8-84bf7eb81f9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "740858b0-4afd-4d76-92f1-d36167a33169",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>alcohol_code</th>\n",
       "      <th>tobacco_code</th>\n",
       "      <th>obesity_levels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Benin</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Chad</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Eritrea</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Ethiopia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Ghana</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>Mali</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>Mauritania</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>Niger</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>Senegal</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>Togo</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        COUNTRY  alcohol_code  tobacco_code obesity_levels\n",
       "17        Benin             0             0     1.very low\n",
       "26         Chad             0             0     1.very low\n",
       "42      Eritrea             0             0     1.very low\n",
       "44     Ethiopia             0             0     1.very low\n",
       "49        Ghana             0             0     1.very low\n",
       "83         Mali             0             0     1.very low\n",
       "86   Mauritania             0             0     1.very low\n",
       "94        Niger             0             0     1.very low\n",
       "118     Senegal             0             0     1.very low\n",
       "128        Togo             0             0     1.very low"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_countries = countriesCIA[\n",
    "    (countriesCIA['alcohol_code'] == 0) & \n",
    "    (countriesCIA['tobacco_code'] == 0) & \n",
    "    (countriesCIA['obesity_levels'] == '1.very low')\n",
    "]\n",
    "\n",
    "best_countries[['COUNTRY', 'alcohol_code', 'tobacco_code', 'obesity_levels']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "8576881f-8d45-4cfd-a9ff-7117c3f8018b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>name</th>\n",
       "      <th>region</th>\n",
       "      <th>obesityAdults_rate</th>\n",
       "      <th>TobaccoUse_perc</th>\n",
       "      <th>Alcohol_LitersPerCap</th>\n",
       "      <th>tobacco_code</th>\n",
       "      <th>tobacco_levels</th>\n",
       "      <th>tobacco_custom</th>\n",
       "      <th>alcohol_code</th>\n",
       "      <th>alcohol_levels</th>\n",
       "      <th>geometry</th>\n",
       "      <th>obesity_levels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Benin</td>\n",
       "      <td>Benin</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>1.25</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((2.73295 7.65821, 2.73222 7.651...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Chad</td>\n",
       "      <td>Chad</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>8.3</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((14.19477 9.98175, 14.45055 9.9...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Eritrea</td>\n",
       "      <td>Eritrea</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>0.93</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((42.06777 13.69778, 42.09027 13...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Ethiopia</td>\n",
       "      <td>Ethiopia</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.16</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((45.4894 5.48976, 45.37447 5.36...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Ghana</td>\n",
       "      <td>Ghana</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.59</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>1. below5</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((0.32238 6.03584, 0.35375 6.023...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>Guatemala</td>\n",
       "      <td>Guatemala</td>\n",
       "      <td>Central America and the Caribbean</td>\n",
       "      <td>1</td>\n",
       "      <td>10.9</td>\n",
       "      <td>1.63</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((-92.16446 14.48389, -92.2189 1...</td>\n",
       "      <td>2.low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83</th>\n",
       "      <td>Mali</td>\n",
       "      <td>Mali</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>8.3</td>\n",
       "      <td>0.60</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((-9.86522 12.05481, -9.91195 12...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>Mauritania</td>\n",
       "      <td>Mauritania</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>10.7</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((-6.33596 22.99026, -6.32583 22...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>Oman</td>\n",
       "      <td>Oman</td>\n",
       "      <td>Middle East</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.47</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((56.26972 25.63601, 56.23804 25...</td>\n",
       "      <td>3.average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>Niger</td>\n",
       "      <td>Niger</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((7.02806 12.99577, 6.94222 12.9...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>Senegal</td>\n",
       "      <td>Senegal</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((-14.34175 12.67889, -14.39306 ...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>Togo</td>\n",
       "      <td>Togo</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>6.8</td>\n",
       "      <td>1.40</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>2.(5-15]</td>\n",
       "      <td>0</td>\n",
       "      <td>1.very low</td>\n",
       "      <td>MULTIPOLYGON (((1.65542 7.52977, 1.65014 7.513...</td>\n",
       "      <td>1.very low</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        COUNTRY        name                             region  \\\n",
       "17        Benin       Benin                             Africa   \n",
       "26         Chad        Chad                             Africa   \n",
       "42      Eritrea     Eritrea                             Africa   \n",
       "44     Ethiopia    Ethiopia                             Africa   \n",
       "49        Ghana       Ghana                             Africa   \n",
       "52    Guatemala   Guatemala  Central America and the Caribbean   \n",
       "83         Mali        Mali                             Africa   \n",
       "86   Mauritania  Mauritania                             Africa   \n",
       "88         Oman        Oman                        Middle East   \n",
       "94        Niger       Niger                             Africa   \n",
       "118     Senegal     Senegal                             Africa   \n",
       "128        Togo        Togo                             Africa   \n",
       "\n",
       "     obesityAdults_rate  TobaccoUse_perc  Alcohol_LitersPerCap  tobacco_code  \\\n",
       "17                    0              6.9                  1.25             0   \n",
       "26                    0              8.3                  0.55             0   \n",
       "42                    0              7.5                  0.93             0   \n",
       "44                    0              5.1                  1.16             0   \n",
       "49                    0              3.5                  1.59             0   \n",
       "52                    1             10.9                  1.63             0   \n",
       "83                    0              8.3                  0.60             0   \n",
       "86                    0             10.7                  0.00             0   \n",
       "88                    2              8.0                  0.47             0   \n",
       "94                    0              7.4                  0.11             0   \n",
       "118                   0              6.9                  0.25             0   \n",
       "128                   0              6.8                  1.40             0   \n",
       "\n",
       "    tobacco_levels tobacco_custom  alcohol_code alcohol_levels  \\\n",
       "17      1.very low       2.(5-15]             0     1.very low   \n",
       "26      1.very low       2.(5-15]             0     1.very low   \n",
       "42      1.very low       2.(5-15]             0     1.very low   \n",
       "44      1.very low       2.(5-15]             0     1.very low   \n",
       "49      1.very low      1. below5             0     1.very low   \n",
       "52      1.very low       2.(5-15]             0     1.very low   \n",
       "83      1.very low       2.(5-15]             0     1.very low   \n",
       "86      1.very low       2.(5-15]             0     1.very low   \n",
       "88      1.very low       2.(5-15]             0     1.very low   \n",
       "94      1.very low       2.(5-15]             0     1.very low   \n",
       "118     1.very low       2.(5-15]             0     1.very low   \n",
       "128     1.very low       2.(5-15]             0     1.very low   \n",
       "\n",
       "                                              geometry obesity_levels  \n",
       "17   MULTIPOLYGON (((2.73295 7.65821, 2.73222 7.651...     1.very low  \n",
       "26   MULTIPOLYGON (((14.19477 9.98175, 14.45055 9.9...     1.very low  \n",
       "42   MULTIPOLYGON (((42.06777 13.69778, 42.09027 13...     1.very low  \n",
       "44   MULTIPOLYGON (((45.4894 5.48976, 45.37447 5.36...     1.very low  \n",
       "49   MULTIPOLYGON (((0.32238 6.03584, 0.35375 6.023...     1.very low  \n",
       "52   MULTIPOLYGON (((-92.16446 14.48389, -92.2189 1...          2.low  \n",
       "83   MULTIPOLYGON (((-9.86522 12.05481, -9.91195 12...     1.very low  \n",
       "86   MULTIPOLYGON (((-6.33596 22.99026, -6.32583 22...     1.very low  \n",
       "88   MULTIPOLYGON (((56.26972 25.63601, 56.23804 25...      3.average  \n",
       "94   MULTIPOLYGON (((7.02806 12.99577, 6.94222 12.9...     1.very low  \n",
       "118  MULTIPOLYGON (((-14.34175 12.67889, -14.39306 ...     1.very low  \n",
       "128  MULTIPOLYGON (((1.65542 7.52977, 1.65014 7.513...     1.very low  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "interestingCountries=countriesCIA[countriesCIA.tobacco_code + countriesCIA.alcohol_code==0]\n",
    "\n",
    "interestingCountries"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
